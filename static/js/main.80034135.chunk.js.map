{"version":3,"sources":["components/ImageLinkForm/ImageLinkForm.js","components/ImageDisplay/ImageDisplay.js","components/FoodItem/FoodItem.js","App.js","serviceWorker.js","index.js"],"names":["ImageLinkForm","_ref","onInputChange","onButtonSubmit","react_default","a","createElement","className","style","color","opacity","fontFamily","width","borderRadius","borderTopRightRadius","borderBottomRightRadius","height","onChange","placeholder","onClick","backgroundColor","border","paddingTop","ImageDisplay","imageUrl","src","alt","FoodItem","itemsToShow","initialState","input","item1","item2","item3","item4","item5","items","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","value","console","log","state","models","predict","FOOD_MODEL","then","response","i","rawData","outputs","data","concepts","length","push","JSON","stringify","name","components_ImageLinkForm_ImageLinkForm","components_ImageDisplay_ImageDisplay","components_FoodItem_FoodItem","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80034135.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\r\n    return(\r\n        <div className='imagelinkform'>\r\n            <p className='fw6 f2' style={{color:'white',opacity: 0.87,'fontFamily': 'Saira'}}> Ingredient Detection using Machine Learning </p>\r\n            <div className='input'>\r\n                <input className='f7 pa3 ba bw0 br4' style={{opacity: 0.87,width:'50vh','borderRadius':'3px' ,\r\n                'borderTopRightRadius':'0px','borderBottomRightRadius':'0px',height:'1.7vh','fontFamily': 'Saira'\r\n                }} \r\n                onChange={onInputChange} \r\n                placeholder='Enter image url...' \r\n                />\r\n                <button className='ba f5 pa2' onClick={onButtonSubmit} style={{'backgroundColor':'rgb(142,71,234)',\r\n                opacity: 0.87,color:'white',\r\n                height:'7vh',border:'none',\r\n                'paddingTop': '6px','borderTopRightRadius':'3px','borderBottomRightRadius':'3px',\r\n                \r\n            }}\r\n                > Click here! \r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst ImageDisplay = ({imageUrl}) => {\r\n    return(\r\n        <div className='center'>\r\n            <img src={imageUrl} alt='' style={{'height':' 200px'}}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageDisplay;","import React from 'react';\r\n\r\nimport './FoodItem.css';\r\n\r\nconst FoodItem = ({itemsToShow}) => {\r\n    return(\r\n        <div className='FoodItem'>\r\n            <h3 className='Items'> Item1: {itemsToShow[0]} </h3>\r\n            <h3 className='Items'> Item2: {itemsToShow[1]} </h3>\r\n            <h3 className='Items'> Item3: {itemsToShow[2]} </h3>\r\n            <h3 className='Items'> Item4: {itemsToShow[3]} </h3>\r\n            <h3 className='Items'> Item5: {itemsToShow[4]} </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FoodItem;","import React,{Component} from 'react';\r\nimport './App.css';\r\n// import Particles from 'react-particles-js';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Clarifai from 'clarifai';\r\nimport ImageDisplay from './components/ImageDisplay/ImageDisplay';\r\nimport FoodItem from './components/FoodItem/FoodItem';\r\n\r\nconst initialState = {\r\n  input: '',\r\n  imageUrl: '',\r\n  item1: '',\r\n  item2: '',\r\n  item3: '',\r\n  item4: '',\r\n  item5: '',\r\n  items:[]\r\n    // item6: '',\r\n    // item7: '',\r\n    // item8: '',\r\n    // item9: '',\r\n    // item10: '',\r\n}\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '4329822d12914ec9b67e15243084cbd0'\r\n});\r\n\r\n// const Particleoptions = {\r\n//   particles: {\r\n//     number: {\r\n//       value: 75,\r\n//       density: {\r\n//         enable: true, \r\n//         value_area: 1000\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\nlet itemsToShow = [];\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state=initialState;\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    \r\n    //this.setState({item1:'',item2:'',item3:'',item4:'',item5:''});\r\n    this.setState({imageUrl: this.state.input})\r\n    app.models.predict(Clarifai.FOOD_MODEL, this.state.imageUrl).then(\r\n    function(response) {\r\n      // console.log(response);\r\n      // console.log(JSON.stringify(response.outputs));\r\n      var i;\r\n      for(i=0;i<response.rawData.outputs[0].data.concepts.length;i++)\r\n       {\r\n         itemsToShow.push(JSON.stringify(response.rawData.outputs[0].data.concepts[i].name))\r\n       }\r\n      \r\n       console.log(itemsToShow);\r\n      //  this.setState({\r\n      //   items:itemsToShow\r\n      // })\r\n      // this.setProps(JSON.stringify(response.rawData.outputs[0].data.concepts[0].name),\r\n      //   response.rawData.outputs[0].data.concepts[1].name,\r\n      //   response.rawData.outputs[0].data.concepts[2].name,\r\n      //   response.rawData.outputs[0].data.concepts[3].name,\r\n      //   response.rawData.outputs[0].data.concepts[4].name\r\n      //   );\r\n    });\r\n}\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n      <div className='Container'>\r\n        <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\r\n        <ImageDisplay imageUrl={this.state.imageUrl} />\r\n        <FoodItem itemsToShow = {itemsToShow} />\r\n        {itemsToShow=[]}\r\n      </div>\r\n      {/* <Particles className='particles' params={Particleoptions} /> */}\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}